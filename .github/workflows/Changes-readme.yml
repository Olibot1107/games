name: Generate README changelog

# Triggers:
# - push to main (ignore README.md pushes so our own updates don't re-trigger)
# - closed pull requests (only runs if merged)
# - manual run
on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - "README.md"
  pull_request:
    types: [ closed ]
  workflow_dispatch:

# allow this workflow to push the updated README
permissions:
  contents: write

concurrency:
  group: repo-readme-changelog
  cancel-in-progress: true

jobs:
  update-readme:
    # Don't run if the actor is the GitHub Actions bot (prevents self-trigger loops).
    # Also, for pull_request events only run when the PR was merged.
    if: >
      github.actor != 'github-actions[bot]' &&
      (github.event_name != 'pull_request' || github.event.pull_request.merged == true)

    runs-on: ubuntu-latest
    env:
      REPO: ${{ github.repository }}
      MAX_COMMITS: 100

    steps:
      - name: Checkout repository (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Build changelog table and update README
        run: |
          set -eo pipefail

          START_MARKER="<!-- changelog-start -->"
          END_MARKER="<!-- changelog-end -->"
          TMPFILE="changelog.md"

          # Header for the changelog block
          cat > "${TMPFILE}" <<'MARK'
<!-- changelog-start -->
## ðŸ“œ Changelog

| Commit | Message | Author | Date | Files Changed |
|--------|---------|--------|------|---------------|
MARK

          # Build a markdown table of the last $MAX_COMMITS commits
          git log -n "${MAX_COMMITS}" --pretty=format:'%H%x01%h%x01%s%x01%an%x01%ad' --date=short \
            | while IFS=$'\x01' read -r full short subject author date; do
                # count files changed in that commit
                files_changed=$(git show --pretty="" --name-only "$full" | sed '/^$/d' | wc -l)
                # sanitize message to avoid breaking the table (replace pipes)
                subject_safe=$(printf '%s' "$subject" | sed 's/|/-/g' | tr -d '\r')
                printf "| [%s](https://github.com/%s/commit/%s) | %s | %s | %s | %s |\n" \
                  "$short" "${REPO}" "$full" "$subject_safe" "$author" "$date" "$files_changed" >> "${TMPFILE}"
              done

          # footer marker
          echo "" >> "${TMPFILE}"
          echo "${END_MARKER}" >> "${TMPFILE}"

          # Insert or append the changelog block into README.md between markers.
          if [ -f README.md ]; then
            python - <<'PY'
from pathlib import Path
p = Path('README.md')
block = Path('changelog.md').read_text()
text = p.read_text()
start = "<!-- changelog-start -->"
end = "<!-- changelog-end -->"
if start in text and end in text:
    head, rest = text.split(start, 1)
    _, tail = rest.split(end, 1)
    new = head + start + "\n" + block + "\n" + end + tail
else:
    new = text.rstrip() + "\n\n" + block
p.write_text(new)
PY
          else
            # no README exists â€” create one from the changelog
            cp changelog.md README.md
          fi

          # Commit and push only if there are changes
          git add README.md || true
          if git diff --cached --quiet; then
            echo "No README changes to commit."
            exit 0
          fi

          git commit -m "chore: update README changelog [skip ci]"
          git push

      - name: Finished
        run: echo "README changelog updated (if changes found)."
